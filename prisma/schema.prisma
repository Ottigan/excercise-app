datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL_LOCAL")
  referentialIntegrity = "prisma"
}

generator js {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

model User {
  id            String    @id @default(cuid())
  name          String
  surname       String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts  Account[]
  sessions  Session[]
  exercises Exercise[]
  workouts  Workout[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Exercise {
  id          String  @id @default(cuid())
  name        String
  sets        Int?    @default(0)
  reps        Int?    @default(0)
  rest        Float?  @default(0)
  weight      Float?  @default(0)
  description String?
  userId      String?

  workoutExercise WorkoutExercise[]
  user            User?             @relation(fields: [userId], references: [id])
}

model Workout {
  id     String  @id @default(cuid())
  name   String
  userId String?

  exercises WorkoutExercise[]
  user      User?             @relation(fields: [userId], references: [id])
}

model WorkoutExercise {
  id         String  @id @default(cuid())
  name       String
  sets       Int?    @default(0)
  reps       Int?    @default(0)
  rest       Float?  @default(0)
  weight     Float?  @default(0)
  workoutId  String?
  exerciseId String

  setData  WorkoutExerciseSet[]
  workout  Workout?             @relation(fields: [workoutId], references: [id])
  exercise Exercise?            @relation(fields: [exerciseId], references: [id])
}

model WorkoutExerciseSet {
  id                String  @id @default(cuid())
  reps              Int?    @default(0)
  workoutExerciseId String?

  workoutExercise WorkoutExercise? @relation(fields: [workoutExerciseId], references: [id])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
