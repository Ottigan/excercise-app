import { Workout } from '@prisma/client';
import Button from 'components/Button';
import Table from 'components/Table';
import { GetServerSideProps } from 'next';
import { authOptions, UserWithId } from 'pages/api/auth/[...nextauth].next';
import React, { useCallback, useState } from 'react';
import { getServerSession } from 'utils/auth';
import { db } from 'utils/db';
import { faTrash } from '@fortawesome/free-solid-svg-icons';
import Head from 'next/head';

interface WorkoutsProps {
  workouts: Workout[];
}

export default function Workouts(props: WorkoutsProps) {
  const [workouts, setWorkouts] = useState(props.workouts);

  const handleDelete = useCallback((name: string) => {
    fetch('/api/workouts', {
      method: 'DELETE',
      body: JSON.stringify({ name }),
    })
      .then((res) => res.json())
      .then((data: Workout[]) => {
        setWorkouts(data);
      })
      .catch((err) => console.error(err));
  }, []);

  return (
    <>
      <Head>
        <title>MyGymPal</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="p-3">
        <Button className="basis-4/12 mb-3">Create</Button>
        <Table
        >
          <thead>
            <tr>
              <th className='w-10/12'>Name</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {workouts.length
              ? workouts.map(({ id, name }) => (
                <tr key={id}>
                  <td title={name}>{name}</td>
                  <td>
                    <Button value={name} onClick={() => handleDelete(name)} icon={faTrash}/>
                  </td>
                </tr>
              ))
              : <tr><td colSpan={2} style={{ textAlign: 'center' }}>No workouts...</td></tr>}
          </tbody>
        </Table>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  const workouts = await db.workout.findMany({ where: { userId: (session?.user as UserWithId).id } });

  return { props: { workouts } };
};
