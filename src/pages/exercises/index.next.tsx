import { Exercise } from '@prisma/client';
import Button from 'components/Button';
import Input from 'components/Input';
import Table from 'components/Table';
import { GetServerSideProps } from 'next';
import { authOptions, UserWithId } from 'pages/api/auth/[...nextauth].next';
import React, { FormEvent, useCallback, useReducer, useState } from 'react';
import { getServerSession } from 'utils/auth';
import { db } from 'utils/db';
import { faTrash } from '@fortawesome/free-solid-svg-icons';
import Head from 'next/head';
import { formDataTemplate, reducer } from './utils';

interface ExercisesProps {
  exercises: Exercise[];
}

export default function Exercises(props: ExercisesProps) {
  const [exercises, setExercises] = useState(props.exercises);
  const [formData, handleFormData] = useReducer(reducer, formDataTemplate);

  const handleSubmit = useCallback(async (e: FormEvent) => {
    e.preventDefault();

    fetch('/api/exercises', {
      method: 'POST',
      body: JSON.stringify(formData),
    })
      .then((res) => res.json())
      .then((data: Exercise[]) => {
        setExercises(data);
        handleFormData({ type: 'clear' });
      })
      .catch((err) => console.error(err));
  }, [formData]);

  const handleDelete = useCallback((id: string) => {
    fetch(`/api/exercises?id=${id}`, { method: 'DELETE' })
      .then((res) => res.json())
      .then((data: Exercise[]) => {
        setExercises(data);
      })
      .catch((err) => console.error(err));
  }, []);

  return (
    <>
      <Head>
        <title>MyGymPal</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className="p-3">
        <form onSubmit={handleSubmit} className="flex flex-wrap gap-2 mb-9" autoComplete='off'>
          <Input
            onChange={({ target: { value, name } }) => handleFormData({ type: name, payload: value })}
            value={formData.name}
            label="Name"
            name="name"
          />
          <Input
            onChange={({ target: { value, name } }) => handleFormData({ type: name, payload: value })}
            value={formData.description}
            label="Description"
            name="description"
            className="mb-3"
          />
          <Button type="submit" className="basis-4/12">Create</Button>
        </form>
        <Table
        >
          <thead>
            <tr>
              <th className='w-4/12'>Name</th>
              <th className='w-6/12'>Description</th>
              <th></th>
            </tr>
          </thead>
          <tbody>
            {exercises.length
              ? exercises.map(({ id, name, description }) => <tr key={id}>
                <td title={name}>{name}</td>
                <td title={description || ''}>{description}</td>
                <td>
                  <Button value={name} onClick={() => handleDelete(id)} icon={faTrash}/>
                </td>
              </tr>)
              : <tr><td colSpan={2} style={{ textAlign: 'center' }}>No exercises...</td></tr>}
          </tbody>
        </Table>
      </main>
    </>
  );
}

export const getServerSideProps: GetServerSideProps = async (context) => {
  const session = await getServerSession(context.req, context.res, authOptions);

  const exercises = await db.exercise.findMany({ where: { userId: (session?.user as UserWithId).id } });

  return { props: { exercises } };
};
